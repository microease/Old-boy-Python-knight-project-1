# 模块
# import 模块名
# import 模块名 as 别名

# from 模块名 import 变量名/类名/函数名
# from 模块名 import 变量名,变量名2
# from 模块名 import 变量名 as a,变量名2 as b
# from 模块名 import *   表示导入所有
# * 和 __all__是相关联的

# 模块搜索路径
    # sys.path

# 有一个py文件，里面有一段代码
# 我不希望这段代码在被导入的时候执行
# 在这段代码之前添加 if __name__ == '__main__':

# 包
# 基础部分
# 直接导入模块 - 不需要设置init.py文件
# import 包.包.模块
# 包.包.模块.函数名()

# import 包.包.模块 as 模块
# 模块.函数名()

# from 包 import 模块
# 模块.函数名()

# from 包.模块 import 函数名/变量名
# 直接使用变量名、函数名
# 函数名()

# 导入包
# 导入一个包相当于执行了这个包中的init文件
# 如果我们不修改init，直接导入一个包，这个包下面的模块不会被自动导入
# 如果需要导入包之后，能够正常的使用这个包中的模块
# 应该修改init文件

# 绝对导入
    # 找sys.path中有的目录，从这个目录下开始一级一级的导入
# 相对导入
    # .表示当前目录
    # ..表示上一级目录
    # 含有相对导入的文件不能被执行
