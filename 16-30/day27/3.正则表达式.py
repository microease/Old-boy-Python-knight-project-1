# 场景
# 在发短信之前应该先来验证一下 手机号码是不是正确
# 邮箱地址
# 身份证号

# 爬虫
# 访问一个网页，网页源代码
# 对于pyhon来说 是一串字符串
# 从一大段的文字当中提取你想要的数据

# 正则表达式的常见使用场景
# 1.判断某一个字符串是否符合规则      注册页-判断手机号、身份证号 是否合法
# 2.将符合规则的内容从一个庞大的字符串体系当中提取出来    爬虫、日志分析

# 什么是正则表达式？ 只和字符串打交道
# 是一种规则 来约束字符串的规则

# [1234567890]
# 字符组  是元字符中的一个
# 在字符组中所有的字符都可以匹配任意一个字符位置上能出现的内容
# 如果在字符串中有任意一个字符是字符组中的内容，那么就是匹配上的项
# [0-9]
# [a-z]
# [A-Z]
# ascii编码小的值 指向一个大的值
# [0-9a-zA-Z]
# [1-9][0-9]

# \d表示匹配一个数字 [0-9]

# 元字符
# \w word \d digit \s space \n next \t tab \W \D \S

# 元字符
# \w \d \s \W \D \S \n \t  匹配特殊的字符
# ^ $ \b  # 匹配边界
# [] [^]  # 字符组相关的
# |       # 或
# ()      # 分组
# .       # 匹配除了换行符之外的任意字符

# 写一个正则规则匹配一个手机号码

# 量词
# ？+ * {n} {n,} {n,m}
# \d+整数
# \d+\.\d+  小数
# \d+\.\d+|\d+ 整数或者小数
# \d+(\.\d+)?

# 贪婪匹配  ： 正则会尽量多的帮我们匹配
    # 默认贪婪 回溯算法
# 非贪婪匹配 ：会尽量少为我们匹配
    # 量词？表示非贪婪 惰性匹配
    # .*?x  表示匹配任意长度任意字符遇到一个x就立即停止

# 身份证号码是一个长度为15或18个字符的字符串，
# 如果是15位则全部 数字组成，首位不能为0；  [1-9]\d{14}
# 如果是18位，首位不能为0 前17位全部是数字，末位可能是数字或x [1-9]\d{16}[\dx]
# [1-9]\d{16}[\dx]|[1-9]\d{14}
# [1-9]\d{14}(\d{2}[\dx])?

# 匹配网址
# www\.(baidu|oldboy|qq)\.com
# www.baidu.com
# www.oldboy.com
# www.qq.com

# 元字符
# 元字符 量词
# 元字符 量词 ？ 在量词的范围内尽量少的匹配这个元字符
# 分组   对某些固定的内容做量词约束
# 或     把长的放前面

# 转义符
# pattern = r'\\n'
# s = r'\n'








