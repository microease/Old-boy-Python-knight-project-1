# -*- coding: utf-8 -*-
# @Time    : 2018/8/16 10:55
# @Author  : 骑士计划
# @Email   : customer@luffycity.com
# @File    : 04 名称空间，作用域，取值顺序等.py
# @Software: PyCharm
# a = 123
# b = 456
# name = 'alex'
#
# def func1():
#     a1 = 'fdsjkf'
#     # return a1
# func1()
'''
我们首先回忆一下Python代码运行的时候遇到函数是怎么做的，从Python解释器开始执行之后，就在内存中开辟里一个空间，每当遇到一个变量的时候，就把变量名和值之间对应的关系记录下来，但是当遇到函数定义的时候，解释器只是象征性的将函数名读如内存，表示知道这个函数存在了，至于函数内部的变量和逻辑，解释器根本不关心。

　　等执行到函数调用的时候，Python解释器会再开辟一块内存来储存这个函数里面的内容，这个时候，才关注函数里面有哪些变量，而函数中的变量回储存在新开辟出来的内存中，函数中的变量只能在函数内部使用，并且会随着函数执行完毕，这块内存中的所有内容也会被清空。

我们给这个‘存放名字与值的关系’的空间起了一个名字-------命名空间。

代码在运行伊始，创建的存储“变量名与值的关系”的空间叫做全局命名空间；

在函数的运行中开辟的临时的空间叫做局部命名空间。
'''
# python中，名称空间分三种：
    # 全局名称空间
    # 局部名称空间（临时）
    # 内置名称空间

# 作用域：
#     全局作用域 全局名称空间 内置名称空间
#     局部作用域 局部名称空间（临时）

# 取值顺序： 就近原则
    # 局部名称空间  ---->  全局名称空间 ----->内置名称空间  单向从小到大范围
# len = 6
# def func1():
#     len = 3
# func1()
# print(len)
# def len(l):
#     return l
# #
# print(len([1,2,3]))

# print(''333)
# input()
a = 1
# 加载顺序
    # 内置名称空间 ----> 全局名称空间（当程序执行时） --- > 局部名称空间（当函数调用的时候）
